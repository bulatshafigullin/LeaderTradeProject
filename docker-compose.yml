version: "3.8"
services:
  # Postgres
  postgres:
    restart: always
    image: postgres:13
    container_name: database
    volumes:
      - postgres-data:/var/lib/postgresql/data/
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: 1234
      POSTGRES_DB: leader_trade_db
    ports:
      - "5431:5432"
    healthcheck:
      test: [ "CMD", "pg_isready","-q","-d", "leader_trade_db", "-U","postgres" ]
      interval: 5s
      timeout: 5s
      retries: 10
    networks:
      - global-net
  # Redis
  redis:
    restart: always
    image: redis:5
    container_name: cache
    volumes:
      - redis-data:/var/lib/redis
    ports:
      - "6378:6379"
    healthcheck:
      test: [ "CMD", "redis-cli","ping" ]
      interval: 5s
      timeout: 5s
      retries: 10
    networks:
      - global-net
  #RabbitMQ
  rabbitmq:
    restart: always
    image: rabbitmq:3-management
    container_name: queue
    volumes:
      - rabbitmq-data:/var/lib/rabbitmq/data/
    environment:
      - RABBITMQ_DEFAULT_USER=guest
      - RABBITMQ_DEFAULT_PASS=guest
    ports:
      - "5672:5672"
      - "15672:15672"
    healthcheck:
      test: rabbitmq-diagnostics -q ping
      interval: 10s
      timeout: 30s
      retries: 3
    networks:
      - global-net
  # Django Server
  server:
    restart: always
    container_name: server
    build:
      context: ./server/
      dockerfile: ./deploy/docker/server.Dockerfile
    env_file:
      - ./server/.env
    ports:
      - "8100:8100"
    healthcheck:
      test: [ "CMD","curl", "-f", "http://localhost:8100/api/v3/health/" ]
      interval: 20s
      timeout: 5s
      retries: 10
    depends_on:
      postgres:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
      redis:
        condition: service_healthy
    volumes:
      - static-data:/app/server/static
      - media-data:/app/server/media
    networks:
      - global-net
  # Celery Worker & Beat
  celery:
    restart: always
    container_name: scheduler
    build:
      context: ./server/
      dockerfile: ./deploy/docker/celery.Dockerfile
    volumes:
      - rabbitmq-data:/var/lib/rabbitmq/data/
    depends_on:
      server:
        condition: service_healthy
    ports:
      - "8200:8200"
    networks:
      - global-net
  # NGINX
  nginx:
    restart: always
    container_name: dispatcher
    build:
      context: ./nginx
      dockerfile: Dockerfile
    ports:
      - "80:80"
    volumes:
      - static-data:/app/server/static
      - media-data:/app/server/media
    depends_on:
      server:
        condition: service_healthy
    networks:
      - global-net

networks:
  global-net:
    driver: bridge
volumes:
  postgres-data: { }
  rabbitmq-data: { }
  redis-data: { }
  static-data: { }
  media-data: { }
